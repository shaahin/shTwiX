<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Social.Twitter</name>
    </assembly>
    <members>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.CursoredUserListListDeserializer">
            <summary>
            JSON deserializer for cursored list of user-defined lists. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.UserListDeserializer">
            <summary>
            JSON deserializer for user-defined lists. 
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.ListTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.IListOperations"/>, providing a binding to Twitter's list-oriented REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.AbstractTwitterOperations">
            <summary>
            Base class for Twitter operations.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.IListOperations">
            <summary>
            Interface defining the operations for working with a user's lists.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListsAsync">
            <summary>
            Asynchronously retrieves user lists for the authenticated user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s for the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListsInCursorAsync(System.Int64)">
            <summary>
            Asynchronously retrieves user lists for the authenticated user.
            </summary>
            <param name="cursor">
            The cursor to retrieve results from. -1 will retrieve the first cursored page of results.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s for the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves user lists for the given user.
            </summary>
            <param name="userId">The ID of the Twitter user.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s for the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListsInCursorAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves user lists for the given user.
            </summary>
            <param name="userId">The ID of the Twitter user.</param>
            <param name="cursor">
            The cursor to retrieve results from. -1 will retrieve the first cursored page of results.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s for the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListsAsync(System.String)">
            <summary>
            Asynchronously retrieves user lists for the given user.
            </summary>
            <param name="screenName">The screen name of the Twitter user.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s for the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListsInCursorAsync(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves user lists for the given user.
            </summary>
            <param name="screenName">The screen name of the Twitter user.</param>
            <param name="cursor">
            The cursor to retrieve results from. -1 will retrieve the first cursored page of results.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s for the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a specific user list.
            </summary>
            <param name="listId">The ID of the list to retrieve.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the requested <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListAsync(System.String,System.String)">
            <summary>
            Asynchronously retrieves a specific user list.
            </summary>
            <param name="screenName">The screen name of the list owner.</param>
            <param name="listSlug">The lists's slug.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the requested <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListStatusesAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the timeline tweets for the given user list.
            </summary>
            <param name="listId">The ID of the list to retrieve.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/> objects for the items in the user list timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListStatusesAsync(System.Int64,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves the timeline tweets for the given user list.
            </summary>
            <param name="listId">The ID of the list to retrieve.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/> objects for the items in the user list timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListStatusesAsync(System.Int64,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves the timeline tweets for the given user list.
            </summary>
            <param name="listId">The ID of the list to retrieve.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/> objects for the items in the user list timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListStatusesAsync(System.String,System.String)">
            <summary>
            Asynchronously retrieves the timeline tweets for the given user list.
            </summary>
            <param name="screenName">The screen name of the Twitter user.</param>
            <param name="listSlug">The list's slug.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/> objects for the items in the user list timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListStatusesAsync(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves the timeline tweets for the given user list.
            </summary>
            <param name="screenName">The screen name of the Twitter user.</param>
            <param name="listSlug">The list's slug.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/> objects for the items in the user list timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListStatusesAsync(System.String,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves the timeline tweets for the given user list.
            </summary>
            <param name="screenName">The screen name of the Twitter user.</param>
            <param name="listSlug">The list's slug.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/> objects for the items in the user list timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.CreateListAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously creates a new user list.
            </summary>
            <param name="name">The name of the list.</param>
            <param name="description">The list description.</param>
            <param name="isPublic">If true, the list will be public; if false the list will be private.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the newly created <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.UpdateListAsync(System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously updates an existing user list
            </summary>
            <param name="listId">The ID of the list.</param>
            <param name="name">The new name of the list.</param>
            <param name="description">The new list description.</param>
            <param name="isPublic">If true, the list will be public; if false the list will be private.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the newly updated <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.DeleteListAsync(System.Int64)">
            <summary>
            Asynchronously removes a user list.
            </summary>
            <param name="listId">The ID of the list to be removed.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListMembersAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of Twitter profiles whose users are members of the list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListMembersAsync(System.String,System.String)">
            <summary>
            Asynchronously retrieves a list of Twitter profiles whose users are members of the list.
            </summary>
            <param name="screenName">The screen name of the list owner.</param>
            <param name="listSlug">The slug of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.AddToListAsync(System.Int64,System.Int64[])">
            <summary>
            Asynchronously adds one or more new members to a user list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <param name="newMemberIds">One or more profile IDs of the Twitter profiles to add to the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.AddToListAsync(System.Int64,System.String[])">
            <summary>
            Asynchronously adds one or more new members to a user list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <param name="newMemberScreenNames">One or more profile IDs of the Twitter profiles to add to the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.RemoveFromListAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously removes a member from a user list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <param name="memberId">The ID of the member to be removed.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.RemoveFromListAsync(System.Int64,System.String)">
            <summary>
            Asynchronously removes a member from a user list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <param name="memberScreenName">The screen name of the member to be removed.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.SubscribeAsync(System.Int64)">
            <summary>
            Asynchronously subscribes the authenticating user to a list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.SubscribeAsync(System.String,System.String)">
            <summary>
            Asynchronously subscribes the authenticating user to a list.
            </summary>
            <param name="screenName">The screen name of the list owner.</param>
            <param name="listSlug">The slug of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.UnsubscribeAsync(System.Int64)">
            <summary>
            Asynchronously unsubscribes the authenticating user from a list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.UnsubscribeAsync(System.String,System.String)">
            <summary>
            Asynchronously unsubscribes the authenticating user from a list.
            </summary>
            <param name="screenName">The screen name of the list owner.</param>
            <param name="listSlug">The slug of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.UserList"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListSubscribersAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the subscribers to a list.
            </summary>
            <param name="listId">The ID of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s for the list's subscribers.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetListSubscribersAsync(System.String,System.String)">
            <summary>
            Asynchronously retrieves the subscribers to a list.
            </summary>
            <param name="screenName">The screen name of the list owner.</param>
            <param name="listSlug">The slug of the list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s for the list's subscribers.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetMembershipsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the lists that a given user is a member of.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s that the user is a member of.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetMembershipsAsync(System.String)">
            <summary>
            Asynchronously retrieves the lists that a given user is a member of.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s that the user is a member of.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetSubscriptionsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the lists that a given user is subscribed to.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s that the user is subscribed to.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.GetSubscriptionsAsync(System.String)">
            <summary>
            Asynchronously retrieves the lists that a given user is subscribed to.
            </summary>
            <param name="screenName">The user's screen name.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.UserList"/>s that the user is subscribed to.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.IsMemberAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously checks to see if a given user is a member of a given list.
            </summary>
            <param name="listId">The list ID.</param>
            <param name="memberId">The user ID to check for membership.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether or not the user is a member of the list.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.IsMemberAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously checks to see if a given user is a member of a given list.
            </summary>
            <param name="screenName">The screen name of the list's owner.</param>
            <param name="listSlug">The list's slug.</param>
            <param name="memberScreenName">The screenName to check for membership.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether or not the user is a member of the list.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.IsSubscriberAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously checks to see if a given user subscribes to a given list.
            </summary>
            <param name="listId">The list ID.</param>
            <param name="subscriberId">The user ID to check for subscribership.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether or not the user subscribes to the list.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IListOperations.IsSubscriberAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously checks to see if a given user subscribes to a given list.
            </summary>
            <param name="screenName">The screen name of the list's owner.</param>
            <param name="listSlug">The list's slug.</param>
            <param name="subscriberScreenName">The screenName to check for subscribership.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether or not the user subscribes to the list.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.TwitterApiError">
            <summary>
            The <see cref="T:Spring.Social.Twitter.Api.TwitterApiError"/> enumeration is used by the <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> class 
            to indicate what kind of error caused the exception.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.NotAuthorized">
            <summary>
            Bad, expired or missing OAuth token. 
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.OperationNotPermitted">
            <summary>
            Invalid operation attempted.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.ResourceNotFound">
            <summary>
            Resource could not be found.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.RateLimitExceeded">
            <summary>
            Requests are being rate-limited.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.Server">
            <summary>
            Internal server error.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.ServerDown">
            <summary>
            Server is down or is being upgraded.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.TwitterApiError.ServerOverloaded">
            <summary>
            Server is experiencing high load.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.TwitterApiException">
            <summary>
            The exception that is thrown when a error occurs while consuming Twitter REST API.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.TwitterApiException.#ctor(System.String,Spring.Social.Twitter.Api.TwitterApiError)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="error">The Twitter error.</param>
        </member>
        <member name="M:Spring.Social.Twitter.Api.TwitterApiException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="innerException">The inner exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Spring.Social.Twitter.Api.TwitterApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Social.Twitter.Api.TwitterApiException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with 
            information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds 
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterApiException.Error">
            <summary>
            Gets the Twitter error.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.UserList">
            <summary>
            Represents a user-defined list.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.ID">
            <summary>
            Gets or sets the user-defined list ID.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.Name">
            <summary>
            Gets or sets the user-defined list name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.FullName">
            <summary>
            Gets or sets the user-defined list full name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.UriPath">
            <summary>
            Gets or sets the user-defined list path.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.Description">
            <summary>
            Gets or sets the user-defined description.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.Slug">
            <summary>
            Gets or sets the user-defined slug.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.IsPublic">
            <summary>
            Gets or sets a value indicating whether or not the user-defined list is public.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.IsFollowing">
            <summary>
            Gets or sets a value indicating whether or not the authenticated user is following the user-defined list.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.MemberCount">
            <summary>
            Gets or sets the number of members of the user-defined list name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.UserList.SubscriberCount">
            <summary>
            Gets or sets the number of subscribers of the user-defined list name.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.CursoredList`1">
            <summary>
            Represents the list that includes previous and next cursors for paging through items returned from Twitter in cursored pages.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.CursoredList`1.PreviousCursor">
            <summary>
            Gets or sets the cursor to retrieve the previous page of results.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.CursoredList`1.NextCursor">
            <summary>
            Gets or sets the cursor to retrieve the next page of results.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.CursoredList`1.HasPrevious">
            <summary>
            Gets a value indicating whether or not there is a previous page of results.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.CursoredList`1.HasNext">
            <summary>
            Gets a value indicating whether or not there is a next page of results.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.IFriendOperations">
            <summary>
            Interface defining the operations for working with a user's friends and followers.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendsAsync">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the authenticated user follows.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the friend IDs and one call for every 100 friends).
            <para/>
            If all you need is the friend IDs, consider calling GetFriendIds() instead.
            <para/>
            Or if you need only a subset of the user's friends, call UserOperations.GetUsers() passing in the list of friend IDs you need. 
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendsInCursorAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the authenticated user follows.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the friend IDs and one call for every 100 friends).
            <para/>
            If all you need is the friend IDs, consider calling GetFriendIds() instead.
            <para/>
            Or if you need only a subset of the user's friends, call UserOperations.GetUsers() passing in the list of friend IDs you need. 
            </summary>
            <param name="cursor">The cursor used to fetch the friend IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user follows.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the friend IDs and one call for every 100 friends).
            <para/>
            If all you need is the friend IDs, consider calling GetFriendIds() instead.
            <para/>
            Or if you need only a subset of the user's friends, call UserOperations.GetUsers() passing in the list of friend IDs you need. 
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendsInCursorAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user follows.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the friend IDs and one call for every 100 friends).
            <para/>
            If all you need is the friend IDs, consider calling GetFriendIds() instead.
            <para/>
            Or if you need only a subset of the user's friends, call UserOperations.GetUsers() passing in the list of friend IDs you need. 
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <param name="cursor">The cursor used to fetch the friend IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendsAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user follows.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the friend IDs and one call for every 100 friends).
            <para/>
            If all you need is the friend IDs, consider calling GetFriendIds() instead.
            <para/>
            Or if you need only a subset of the user's friends, call UserOperations.GetUsers() passing in the list of friend IDs you need. 
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendsInCursorAsync(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user follows.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the friend IDs and one call for every 100 friends).
            <para/>
            If all you need is the friend IDs, consider calling GetFriendIds() instead.
            <para/>
            Or if you need only a subset of the user's friends, call UserOperations.GetUsers() passing in the list of friend IDs you need. 
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <param name="cursor">The cursor used to fetch the friend IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendIdsAsync">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that the authenticated user follows.
            <para/>
            Call GetFriendIdsForCursor() with a cursor value to get the next/previous page of entries.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendIdsInCursorAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that the authenticated user follows.
            <para/>
            Call GetFriendIdsForCursor() with a cursor value to get the next/previous page of entries.
            </summary>
            <param name="cursor">
            The cursor value to fetch a specific page of entries. Use -1 for the first page of entries.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendIdsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that the given user follows.
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendIdsInCursorAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that the given user follows.
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <param name="cursor">The cursor value to fetch a specific page of entries. Use -1 for the first page of entries.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendIdsAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that the given user follows.
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFriendIdsInCursorAsync(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that the given user follows.
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <param name="cursor">The cursor value to fetch a specific page of entries. Use -1 for the first page of entries.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowersAsync">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the authenticated user is being followed by.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the follower IDs and one call for every 100 followers).
            <para/>
            If all you need is the follower IDs, consider calling GetFollowerIds() instead.
            <para/>
            Or if you need only a subset of the user's followers, call UserOperations.GetUsers() passing in the list of follower IDs you need. 
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowersInCursorAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the authenticated user is being followed by.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the follower IDs and one call for every 100 followers).
            <para/>
            If all you need is the follower IDs, consider calling GetFollowerIds() instead.
            <para/>
            Or if you need only a subset of the user's followers, call UserOperations.GetUsers() passing in the list of follower IDs you need. 
            </summary>
            <param name="cursor">The cursor used to fetch the follower IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowersAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user is being followed by.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the follower IDs and one call for every 100 followers).
            <para/>
            If all you need is the follower IDs, consider calling GetFollowerIds() instead.
            <para/>
            Or if you need only a subset of the user's followers, call UserOperations.GetUsers() passing in the list of follower IDs you need. 
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowersInCursorAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user is being followed by.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the follower IDs and one call for every 100 followers).
            <para/>
            If all you need is the follower IDs, consider calling GetFollowerIds() instead.
            <para/>
            Or if you need only a subset of the user's followers, call UserOperations.GetUsers() passing in the list of follower IDs you need. 
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <param name="cursor">The cursor used to fetch the follower IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowersAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user is being followed by.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the follower IDs and one call for every 100 followers).
            <para/>
            If all you need is the follower IDs, consider calling GetFollowerIds() instead.
            <para/>
            Or if you need only a subset of the user's followers, call UserOperations.GetUsers() passing in the list of follower IDs you need. 
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowersInCursorAsync(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 users that the given user is being followed by.
            <para/>
            Note that this method make multiple calls to Twitter's REST API (one call to get a list of the follower IDs and one call for every 100 followers).
            <para/>
            If all you need is the follower IDs, consider calling GetFollowerIds() instead.
            <para/>
            Or if you need only a subset of the user's followers, call UserOperations.GetUsers() passing in the list of follower IDs you need. 
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <param name="cursor">The cursor used to fetch the follower IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowerIdsAsync">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that follow the authenticated user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowerIdsInCursorAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that follow the authenticated user.
            </summary>
            <param name="cursor">The cursor value to fetch a specific page of entries. Use -1 for the first page of entries.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowerIdsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that follow the given user.
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowerIdsInCursorAsync(System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that follow the given user.
            </summary>
            <param name="userId">The user's Twitter ID.</param>
            <param name="cursor">The cursor value to fetch a specific page of entries. Use -1 for the first page of entries.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowerIdsAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that follow the given user.
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetFollowerIdsInCursorAsync(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves a list of up to 5000 IDs for the Twitter users that follow the given user.
            </summary>
            <param name="screenName">The user's Twitter screen name.</param>
            <param name="cursor">The cursor value to fetch a specific page of entries. Use -1 for the first page of entries.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user IDs.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.FollowAsync(System.Int64)">
            <summary>
            Asynchronously allows the authenticated user to follow (create a friendship) with another user.
            </summary>
            <param name="userId">The Twitter ID of the user to follow.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the followed user if successful.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.FollowAsync(System.String)">
            <summary>
            Asynchronously allows the authenticated user to follow (create a friendship) with another user.
            </summary>
            <param name="screenName">The screen name of the user to follow.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the followed user if successful.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.UnfollowAsync(System.Int64)">
            <summary>
            Asynchronously allows the authenticated user to follow (create a friendship) with another user.
            </summary>
            <param name="userId">The Twitter ID of the user to unfollow.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the unfollowed user if successful.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.UnfollowAsync(System.String)">
            <summary>
            Asynchronously allows the authenticated use to unfollow (destroy a friendship) with another user.
            </summary>
            <param name="screenName">The screen name of the user to unfollow.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the unfollowed user if successful.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.EnableNotificationsAsync(System.Int64)">
            <summary>
            Asynchronously enables mobile device notifications from Twitter for the specified user.
            </summary>
            <param name="userId">The Twitter ID of the user to receive notifications for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> for the user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.EnableNotificationsAsync(System.String)">
            <summary>
            Asynchronously enables mobile device notifications from Twitter for the specified user.
            </summary>
            <param name="screenName">The Twitter screen name of the user to receive notifications for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> for the user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.DisableNotificationsAsync(System.Int64)">
            <summary>
            Asynchronously disable mobile device notifications from Twitter for the specified user.
            </summary>
            <param name="userId">The Twitter ID of the user to stop notifications for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> for the user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.DisableNotificationsAsync(System.String)">
            <summary>
            Asynchronously disable mobile device notifications from Twitter for the specified user.
            </summary>
            <param name="screenName">The Twitter screen name of the user to stop notifications for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> for the user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.FriendshipExistsAsync(System.String,System.String)">
            <summary>
            Asynchronously checks for a friendship between two users.
            </summary>
            <param name="screenNameA">The screen name of userA.</param>
            <param name="screenNameB">The screen name of userB.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether a user follows another user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetIncomingFriendshipsAsync">
            <summary>
            Asynchronously returns an array of numeric IDs for every user who has a pending request to follow the authenticating user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user ids.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetIncomingFriendshipsAsync(System.Int64)">
            <summary>
            Asynchronously returns an array of numeric IDs for every user who has a pending request to follow the authenticating user.
            </summary>
            <param name="cursor">The cursor of the page to retrieve.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user ids.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetOutgoingFriendshipsAsync">
            <summary>
            Asynchronously returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user ids.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IFriendOperations.GetOutgoingFriendshipsAsync(System.Int64)">
            <summary>
            Asynchronously returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request.
            </summary>
            <param name="cursor">The cursor of the page to retrieve.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a cursored list of user ids.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.FriendTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.IFriendOperations"/>, providing a binding to Twitter's friends and followers-oriented REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.GeoTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.IGeoOperations"/>, providing a binding to Twitter's places and geo REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.IGeoOperations">
            <summary>
            Interface defining the Twitter operations for working with locations.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.GetPlaceAsync(System.String)">
            <summary>
            Asynchronously retrieves information about a place.
            </summary>
            <param name="id">The place ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.Place"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.ReverseGeoCodeAsync(System.Double,System.Double)">
            <summary>
            Asynchronously retrieves up to 20 places matching the given location.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Place"/>s that the point is within.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.ReverseGeoCodeAsync(System.Double,System.Double,System.Nullable{Spring.Social.Twitter.Api.PlaceType},System.String)">
            <summary>
            Asynchronously retrieves up to 20 places matching the given location and criteria
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="granularity">
            The minimal granularity of the places to return. If null, the default granularity (neighborhood) is assumed.
            </param>
            <param name="accuracy">
            A radius of accuracy around the given point. If given a number, the value is assumed to be in meters. 
            The number may be qualified with "ft" to indicate feet. If null, the default accuracy (0m) is assumed.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Place"/>s that the point is within.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.SearchAsync(System.Double,System.Double)">
            <summary>
            Asynchronously searches for up to 20 places matching the given location.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Place"/>s that the point is within.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.SearchAsync(System.Double,System.Double,System.Nullable{Spring.Social.Twitter.Api.PlaceType},System.String,System.String)">
            <summary>
            Asynchronously searches for up to 20 places matching the given location and criteria.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="granularity">
            The minimal granularity of the places to return. If null, the default granularity (neighborhood) is assumed.
            </param>
            <param name="accuracy">
            A radius of accuracy around the given point. If given a number, the value is assumed to be in meters. 
            The number may be qualified with "ft" to indicate feet. If null, the default accuracy (0m) is assumed.
            </param>
            <param name="query">
            A free form text value to help find places by name. If null, no query will be applied to the search.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Place"/>s that the point is within.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.FindSimilarPlacesAsync(System.Double,System.Double,System.String)">
            <summary>
            Asynchronously finds places similar to a place described in the parameters.
            <para/>
            Returns a list of places along with a token that is required for creating a new place.
            <para/>
            This method must be called before calling createPlace().
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="name">The name that the place is known as.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SimilarPlaces"/> collection, including a token that can be used to create a new place.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.FindSimilarPlacesAsync(System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Asynchronously finds places similar to a place described in the parameters.
            <para/>
            Returns a list of places along with a token that is required for creating a new place.
            <para/>
            This method must be called before calling CreatePlace().
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="name">The name that the place is known as.</param>
            <param name="streetAddress">The place's street address. May be null.</param>
            <param name="containedWithin">The ID of the place that the place is contained within.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SimilarPlaces"/> collection, including a token that can be used to create a new place.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IGeoOperations.CreatePlaceAsync(Spring.Social.Twitter.Api.PlacePrototype)">
            <summary>
            Asynchronously creates a new place.
            </summary>
            <param name="placePrototype">
            The place prototype returned in a <see cref="T:Spring.Social.Twitter.Api.SimilarPlaces"/> from a call to FindSimilarPlaces().
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.Place"/> object with the newly created place data.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.CursoredLongListDeserializer">
            <summary>
            JSON deserializer for cursored list of long values. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.SimilarPlacesDeserializer">
            <summary>
            JSON deserializer for results of a similar places search.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.PlaceListDeserializer">
            <summary>
            JSON deserializer for list of places.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.PlaceDeserializer">
            <summary>
            JSON deserializer for places. 
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.SimilarPlaces">
            <summary>
            Represents the results of a similar places search.
            <para/>
            Includes places that match the search criteria and a <see cref="P:Spring.Social.Twitter.Api.SimilarPlaces.PlacePrototype"/> that can be used to create a new place.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.SimilarPlaces.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.Twitter.Api.SimilarPlaces"/> class.
            </summary>
        </member>
        <member name="M:Spring.Social.Twitter.Api.SimilarPlaces.#ctor(System.Collections.Generic.IEnumerable{Spring.Social.Twitter.Api.Place})">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.Twitter.Api.SimilarPlaces"/> class.
            </summary>
            <param name="places">The collection of places that match the search criteria.</param>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SimilarPlaces.PlacePrototype">
            <summary>
            A prototype place that matches the criteria for the call to FindSimilarPlaces(double, double, string), 
            including a create token that can be used to create the place.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.PlacePrototype">
            <summary>
            Represents a new place that could be created. 
            </summary>
            This is the type returned from calls to FindSimilarPlaces(double, double, string).
            <para/>
            It is the only type that can be given to CreatePlace(PlacePrototype) to create a new place.
            <para/>
            This guarantees consistency between the query performed when finding similar places 
            and when creating a new place so that the create token will be valid. 
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.PlacePrototype.CreateToken">
            <summary>
            Gets or sets the token that is required for creating a new place.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.PlacePrototype.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.PlacePrototype.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.PlacePrototype.Name">
            <summary>
            Gets or sets the name that the place is known as.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.PlacePrototype.ContainedWithin">
            <summary>
            Gets or sets the ID of the place that the place is contained within.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.PlacePrototype.StreetAddress">
            <summary>
            Gets or sets the place's street address.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.PlaceType">
            <summary>
            Represents Twitter place types.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Social.Twitter.Api.PlaceType.POI">
            <summary>
            "Point Of Interest" granularity.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.PlaceType.Neighborhood">
            <summary>
            "Neighborhood" granularity.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.PlaceType.City">
            <summary>
            "City" granularity.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.PlaceType.Admin">
            <summary>
            "Admin" granularity.
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.PlaceType.Country">
            <summary>
            "Country" granularity.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Place">
            <summary>
            Represents a place that a Twitter user may send a tweet from.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.ID">
            <summary>
            Gets or sets the place id.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.Name">
            <summary>
            Gets or sets the name that the place is known as.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.FullName">
            <summary>
            Gets or sets the place full name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.StreetAddress">
            <summary>
            Gets or sets the place's street address.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.Country">
            <summary>
            Gets or sets the place country.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.CountryCode">
            <summary>
            Gets or sets the place country code.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Place.PlaceType">
            <summary>
            Gets or sets the type of the place.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.IBlockOperations">
            <summary>
            Interface defining the operations for blocking and unblocking users
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.BlockAsync(System.Int64)">
            <summary>
            Asynchronously blocks a user. If a friendship exists with the user, it will be destroyed.
            </summary>
            <param name="userId">The ID of the user to block.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the blocked user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.BlockAsync(System.String)">
            <summary>
            Asynchronously blocks a user. If a friendship exists with the user, it will be destroyed.
            </summary>
            <param name="screenName">The screen name of the user to block.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the blocked user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.UnblockAsync(System.Int64)">
            <summary>
            Asynchronously unblocks a user.
            </summary>
            <param name="userId">The ID of the user to unblock.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the unblocked user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.UnblockAsync(System.String)">
            <summary>
            Asynchronously unblocks a user.
            </summary>
            <param name="screenName">The screen name of the user to unblock.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> of the unblocked user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.GetBlockedUsersAsync">
            <summary>
            Asynchronously retrieves a list of users that the authenticating user has blocked.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s for the users that are blocked.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.GetBlockedUsersAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves a list of users that the authenticating user has blocked.
            </summary>
            <param name="page">The page of blocked users to return.</param>
            <param name="pageSize">The number of users per page.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s for the users that are blocked.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.GetBlockedUserIdsAsync">
            <summary>
            Asynchronously retrieves a list of user IDs for the users that the authenticating user has blocked.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of user IDs for the users that are blocked.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.IsBlockingAsync(System.Int64)">
            <summary>
            Asynchronously determines if the user has blocked a specific user.
            </summary>
            <param name="userId">The ID of the user to check for a block.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether or not the user is blocked.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IBlockOperations.IsBlockingAsync(System.String)">
            <summary>
            Asynchronously determines if the user has blocked a specific user.
            </summary>
            <param name="screenName">The screen name of the user to check for a block.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a value indicating whether or not the user is blocked.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.DirectMessage">
            <summary>
            Represents a direct message.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.DirectMessage.ID">
            <summary>
            Gets or sets the message ID.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.DirectMessage.Text">
            <summary>
            Gets or sets the message text.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.DirectMessage.Sender">
            <summary>
            Gets or sets the user's profile that sent the message.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.DirectMessage.Recipient">
            <summary>
            Gets or sets the user's profile that received the message.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.DirectMessage.CreatedAt">
            <summary>
            Gets or sets the message created date.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.IDirectMessageOperations">
            <summary>
            Interface defining the Twitter operations for working with direct messages.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessagesReceivedAsync">
            <summary>
            Asynchronously retrieves the 20 most recently received direct messages for the authenticating user. 
            The most recently received messages are listed first.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a collection of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> with the authenticating user as the recipient.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessagesReceivedAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves received direct messages for the authenticating user. 
            The most recently received messages are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200.)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a collection of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> with the authenticating user as the recipient.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessagesReceivedAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves received direct messages for the authenticating user. 
            The most recently received messages are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200.)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a collection of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> with the authenticating user as the recipient.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessagesSentAsync">
            <summary>
            Asynchronously retrieves the 20 most recent direct messages sent by the authenticating user. 
            The most recently sent messages are listed first.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a collection of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> with the authenticating user as the sender.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessagesSentAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves direct messages sent by the authenticating user. 
            The most recently sent messages are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200.)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a collection of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> with the authenticating user as the sender.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessagesSentAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves direct messages sent by the authenticating user. 
            The most recently sent messages are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200.)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a collection of <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/> with the authenticating user as the sender.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.GetDirectMessageAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a direct message by its ID. The message must be readable by the authenticating user.
            </summary>
            <param name="id">The message ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.SendDirectMessageAsync(System.String,System.String)">
            <summary>
            Asynchronously sends a direct message to another Twitter user. 
            <para/>
            The recipient of the message must follow the authenticated user in order for the message to be delivered. 
            <para/>
            If the recipient is not following the authenticated user, an <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> will be thrown.
            </summary>
            <param name="toScreenName">The screen name of the recipient of the messages.</param>
            <param name="text">The message text.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the recipient is not following the authenticating user.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the message duplicates a previously sent message.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the message length exceeds Twitter's 140 character limit.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.SendDirectMessageAsync(System.Int64,System.String)">
            <summary>
            Asynchronously sends a direct message to another Twitter user.
            <para/>
            The recipient of the message must follow the authenticated user in order for the message to be delivered. 
            <para/>
            If the recipient is not following the authenticated user, an <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> will be thrown.
            </summary>
            <param name="toUserId">The Twitter user ID of the recipient of the messages.</param>
            <param name="text">The message text.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.DirectMessage"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the recipient is not following the authenticating user.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the message duplicates a previously sent message.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the message length exceeds Twitter's 140 character limit.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IDirectMessageOperations.DeleteDirectMessageAsync(System.Int64)">
            <summary>
            Asynchronously deletes a direct message for the authenticated user.
            </summary>
            <param name="messageId">The ID of the message to be removed.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.ArrayUtils">
            <summary>
            Utility methods relating to the manipulation of arrays.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.ArrayUtils.Join(System.Array)">
            <summary>
            Returns a comma delimited string representation of an array.
            </summary>
            <param name="array">The array to return as a string.</param>
            <returns>A String representation of the specified <paramref name="array"/>.</returns>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.BlockTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.IBlockOperations"/>, providing a binding to Twitter's block REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.DirectMessageTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.IDirectMessageOperations"/>, providing a binding to Twitter's direct message-oriented REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.DirectMessageListDeserializer">
            <summary>
            JSON deserializer for list of direct messages. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.DirectMessageDeserializer">
            <summary>
            JSON deserializer for direct messages. 
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.SuggestionCategoryListDeserializer">
            <summary>
            JSON deserializer for list of suggestion categories. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.RateLimitStatusDeserializer">
            <summary>
            JSON deserializer for rate limit status. 
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.UserTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.IUserOperations"/>, providing binding to Twitters' user-oriented REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.IUserOperations">
            <summary>
            Interface defining the operations for searching Twitter and retrieving trending data.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUserProfileAsync">
            <summary>
            Asynchronously retrieves the authenticated user's Twitter profile details.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>object representing the user's profile.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUserProfileAsync(System.String)">
            <summary>
            Asynchronously retrieves a specific user's Twitter profile details. 
            Note that this method does not require authentication.
            </summary>
            <param name="screenName">The screen name for the user whose details are to be retrieved.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> object representing the user's profile.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUserProfileAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a specific user's Twitter profile details. 
            Note that this method does not require authentication.
            </summary>
            <param name="userId">The user ID for the user whose details are to be retrieved.</param>
            <returns>A <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/> object representing the user's profile.</returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUserProfileImageAsync(System.String)">
            <summary>
            Asynchronously retrieves the user's profile image. Returns the image in Twitter's "normal" size (48px x 48px).
            </summary>
            <param name="screenName">The screen name of the user.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            an array of bytes containing the user's profile image.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUserProfileImageAsync(System.String,Spring.Social.Twitter.Api.ImageSize)">
            <summary>
            Asynchronously retrieves the user's profile image. Returns the image in Twitter's "normal" type.
            </summary>
            <param name="screenName">The screen name of the user.</param>
            <param name="size">The size of the image.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            an array of bytes containing the user's profile image.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUsersAsync(System.Int64[])">
            <summary>
            Asynchronously retrieves a list of Twitter profiles for the given list of user IDs.
            </summary>
            <param name="userIds">The list of user IDs.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetUsersAsync(System.String[])">
            <summary>
            Asynchronously retrieves a list of Twitter profiles for the given list of screen names.
            </summary>
            <param name="screenNames">The list of screen names.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.SearchForUsersAsync(System.String)">
            <summary>
            Asynchronously searches for up to 20 users that match a given query.
            </summary>
            <param name="query">The search query string.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.SearchForUsersAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously searches for users that match a given query.
            </summary>
            <param name="query">The search query string.</param>
            <param name="page">The page of search results to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s per page. Maximum of 20 per page.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetSuggestionCategoriesAsync">
            <summary>
            Asynchronously retrieves a list of categories from which suggested users to follow may be found.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of suggestion categories.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetSuggestionsAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of suggestions of users to follow for a given category.
            </summary>
            <param name="slug">The category's slug.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.IUserOperations.GetRateLimitStatusAsync">
            <summary>
            Asynchronously retrieves the rate limit status. 
            Can be used with either an authorized or unauthorized TwitterTemplate.
            </summary>
            <remarks>
            <para>
            If the TwitterTemplate is authorized, the rate limits apply to the authenticated user.
            </para>
            <para>
            If the TwitterTemplate is unauthorized, the rate limits apply to the IP address from with the request is made. 
            </para>
            </remarks>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the rate limit status.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.RateLimitStatus">
            <summary>
            Carries data concerning the rate limit status.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.RateLimitStatus.HourlyLimit">
            <summary>
            Gets or sets the limited number of calls per hour. 
            <para/>
            Unauthenticated calls are permitted 150 requests per hour. 
            <para/>
            OAuth calls are permitted 350 requests per hour.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.RateLimitStatus.RemainingHits">
            <summary>
            Gets or sets the remaining number of calls before being rate limited.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.RateLimitStatus.ResetTime">
            <summary>
            Gets or sets the date when the limit number of calls will be reset.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.SuggestionCategory">
            <summary>
            Represents a suggested user category. 
            A category of users that Twitter may suggest that a user follow.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SuggestionCategory.Name">
            <summary>
            Gets or sets the suggested user category name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SuggestionCategory.Slug">
            <summary>
            Gets or sets the short name of a category.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SuggestionCategory.Size">
            <summary>
            Gets or sets the number of users from the suggested user category.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.ImageSize">
            <summary>
            Represents image sizes supported by Twitter.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Social.Twitter.Api.ImageSize.Mini">
            <summary>
            24px x 24px
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.ImageSize.Normal">
            <summary>
            48px x 48px
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.ImageSize.Bigger">
            <summary>
            73px x 73px
            </summary>
        </member>
        <member name="F:Spring.Social.Twitter.Api.ImageSize.Original">
            <summary>
            The original image size
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.AbstractTrendsListDeserializer">
            <summary>
            Base JSON deserializer for list of trends. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.SearchResultsDeserializer">
            <summary>
            JSON deserializer for search results. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.LocalTrendsDeserializer">
            <summary>
            JSON deserializer for local trends. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.WeeklyTrendsListDeserializer">
            <summary>
            JSON deserializer for list of weekly trends. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.DailyTrendsListDeserializer">
            <summary>
            JSON deserializer for list of daily trends. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.SavedSearchListDeserializer">
            <summary>
            JSON deserializer for list of saved searches. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.SavedSearchDeserializer">
            <summary>
            JSON deserializer for saved searches. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.SearchTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.ISearchOperations"/>, providing a binding to Twitter's search and trend-oriented REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.ISearchOperations">
            <summary>
            Interface defining the operations for searching Twitter and retrieving trending data.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.SearchAsync(System.String)">
            <summary>
            Asynchronously searches Twitter, returning the first 50 matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s
            </summary>
            <param name="query">The search query string.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SearchResults"/> containing the search results metadata and a list of matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.SearchAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously searches Twitter, returning a specific page out of the complete set of results.
            </summary>
            <param name="query">The search query string.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SearchResults"/> containing the search results metadata and a list of matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.SearchAsync(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously searches Twitter, returning a specific page out of the complete set of results. 
            Results are filtered to those whose ID falls between sinceId and maxId.
            </summary>
            <param name="query">The search query string.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SearchResults"/> containing the search results metadata and a list of matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetSavedSearchesAsync">
            <summary>
            Asynchronously retrieves the authenticating user's saved searches.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.SavedSearch"/> items.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetSavedSearchAsync(System.Int64)">
            <summary>
            Asynchronously retrieves a single saved search by the saved search's ID.
            </summary>
            <param name="searchId">The ID of the saved search.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SavedSearch"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.CreateSavedSearchAsync(System.String)">
            <summary>
            Asynchronously creates a new saved search for the authenticating user.
            </summary>
            <param name="query">The search query to save.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a <see cref="T:Spring.Social.Twitter.Api.SavedSearch"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.DeleteSavedSearchAsync(System.Int64)">
            <summary>
            Asynchronously deletes a saved search.
            </summary>
            <param name="searchId">The ID of the saved search.</param>
            <returns>A <code>Task</code> that represents the asynchronous operation.</returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetDailyTrendsAsync">
            <summary>
            Asynchronously retrieves the top 20 trending topics, hourly for the past 24 hours. 
            This list includes hashtagged topics.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of Trends objects, one for each hour in the past 24 hours, ordered with the most recent hour first.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetDailyTrendsAsync(System.Boolean)">
            <summary>
            Asynchronously retrieves the top 20 trending topics, hourly for the past 24 hours.
            </summary>
            <param name="excludeHashtags">If true, hashtagged topics will be excluded from the trends list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of Trends objects, one for each hour in the past 24 hours, ordered with the most recent hour first.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetDailyTrendsAsync(System.Boolean,System.String)">
            <summary>
            Asynchronously retrieves the top 20 trending topics, hourly for a 24-hour period starting at the specified date.
            </summary>
            <param name="excludeHashtags">If true, hashtagged topics will be excluded from the trends list.</param>
            <param name="startDate">The date to start retrieving trending data for, in MM-DD-YYYY format.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of Trends objects, one for each hour in the given 24 hours, ordered with the most recent hour first.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetWeeklyTrendsAsync">
            <summary>
            Asynchronously retrieves the top 30 trending topics for each day in the past week.
            This list includes hashtagged topics.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of Trends objects, one for each day in the past week, ordered with the most recent day first.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetWeeklyTrendsAsync(System.Boolean)">
            <summary>
            Asynchronously retrieves the top 30 trending topics for each day in the past week.
            </summary>
            <param name="excludeHashtags">If true, hashtagged topics will be excluded from the trends list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of Trends objects, one for each day in the past week, ordered with the most recent day first.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetWeeklyTrendsAsync(System.Boolean,System.String)">
            <summary>
            Asynchronously retrieves the top 30 trending topics for each day in a given week.
            </summary>
            <param name="excludeHashtags">If true, hashtagged topics will be excluded from the trends list.</param>
            <param name="startDate">The date to start retrieving trending data for, in MM-DD-YYYY format.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of Trends objects, one for each day in the given week, ordered with the most recent day first.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetLocalTrendsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the top 10 trending topics for a given location, identified by its "Where on Earth" (WOE) ID. 
            This includes hashtagged topics.
            </summary>
            <remarks>
            See http://developer.yahoo.com/geo/geoplanet/guide/concepts.html for more information on WOE.
            </remarks>
            <param name="whereOnEarthId">The Where on Earth ID for the location to retrieve trend data.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a Trends object with the top 10 trending topics for the location.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ISearchOperations.GetLocalTrendsAsync(System.Int64,System.Boolean)">
            <summary>
            Asynchronously retrieves the top 10 trending topics for a given location, identified by its "Where on Earth" (WOE) ID.
            </summary>
            <remarks>
            See http://developer.yahoo.com/geo/geoplanet/guide/concepts.html for more information on WOE.
            </remarks>
            <param name="whereOnEarthId">The Where on Earth ID for the location to retrieve trend data.</param>
            <param name="excludeHashtags">If true, hashtagged topics will be excluded from the trends list.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a Trends object with the top 10 trending topics for the given location.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Trends">
            <summary>
            Represents a list of trending topics at a specific point in time.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Trends.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Spring.Social.Twitter.Api.Trends"/>.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Trends.Time">
            <summary>
            Gets or sets the time of trending topics.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Trends.Items">
            <summary>
            Gets or sets the list of trending topics.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Trend">
            <summary>
            Represents a single trending topic.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Trend.Name">
            <summary>
            Gets or sets the name of the trending topic.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Trend.Query">
            <summary>
            Gets or sets the query of the trending topic.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.SavedSearch">
            <summary>
            Represents a saved search.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SavedSearch.ID">
            <summary>
            Gets or sets the saved search ID.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SavedSearch.Name">
            <summary>
            Gets or sets the saved search name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SavedSearch.Query">
            <summary>
            Gets or sets the saved search query.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SavedSearch.CreatedAt">
            <summary>
            Gets or sets the saved search created date.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SavedSearch.Position">
            <summary>
            Gets or sets the saved search position.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.SearchResults">
            <summary>
            Represents the results of a Twitter search, 
            including matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s and any metadata associated with that search.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SearchResults.Tweets">
            <summary>
            Gets or sets the list of matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SearchResults.MaxId">
            <summary>
            Gets or sets the maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID in the search results
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SearchResults.SinceId">
            <summary>
            Gets or sets the <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID after which all of the matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s were created.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.SearchResults.IsLastPage">
            <summary>
            Gets or sets a value indicating whether or not this is the last page of matching <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.JsonUtils">
            <summary>
            Utility methods for generating and parsing JSON strings.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.PagingUtils">
            <summary>
            Utility methods for creating paging parameters for Twitter requests supporting paging.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.TimelineTemplate">
            <summary>
            Implementation of <see cref="T:Spring.Social.Twitter.Api.ITimelineOperations"/>, providing a binding to Twitter's tweet and timeline-oriented REST resources.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.ITimelineOperations">
            <summary>
            Interface defining the operations for sending and retrieving tweets.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetPublicTimelineAsync">
            <summary>
            Asynchronously retrieves the 20 most recently posted tweets from the public timeline. 
            The public timeline is the timeline containing tweets from all Twitter users. 
            As this is the public timeline, authentication is not required to use this method.
            </summary>
            <remarks>
            Note that Twitter caches public timeline results for 60 seconds. 
            Calling this method more frequently than that will count against rate limits 
            and will not return any new results.
            </remarks>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s in the public timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetHomeTimelineAsync">
            <summary>
            Asynchronously retrieves the 20 most recently posted tweets, including retweets, from the authenticating user's home timeline. 
            The home timeline includes tweets from the user's timeline and the timeline of anyone that they follow.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s in the authenticating user's home timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetHomeTimelineAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets, including retweets, from the authenticating user's home timeline. 
            The home timeline includes tweets from the user's timeline and the timeline of anyone that they follow.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s in the authenticating user's home timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetHomeTimelineAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves tweets, including retweets, from the authenticating user's home timeline. 
            The home timeline includes tweets from the user's timeline and the timeline of anyone that they follow.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s in the authenticating user's home timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync">
            <summary>
            Asynchronously retrieves the 20 most recent tweets posted by the authenticating user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been posted by the authenticating user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets posted by the authenticating user. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been posted by the authenticating user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves tweets posted by the authenticating user. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been posted by the authenticating user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.String)">
            <summary>
            Asynchronously retrieves the 20 most recent tweets posted by the given user.
            </summary>
            <param name="screenName">The screen name of the user whose timeline is being requested.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets posted by the given user. The most recent tweets are listed first.
            </summary>
            <param name="screenName">The screen name of the user whose timeline is being requested.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves tweets posted by the given user. The most recent tweets are listed first.
            </summary>
            <param name="screenName">The screen name of the user whose timeline is being requested.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the 20 most recent tweets posted by the given user.
            </summary>
            <param name="userId">The user ID of the user whose timeline is being requested.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.Int64,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets posted by the given user. The most recent tweets are listed first.
            </summary>
            <param name="userId">The user ID of the user whose timeline is being requested.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetUserTimelineAsync(System.Int64,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves tweets posted by the given user. The most recent tweets are listed first.
            </summary>
            <param name="userId">The user ID of the user whose timeline is being requested.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetMentionsAsync">
            <summary>
            Asynchronously retrieves the 20 most recent tweets that mention the authenticated user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that mention the authenticated user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetMentionsAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets that mention the authenticated user. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that mention the authenticated user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetMentionsAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves tweets that mention the authenticated user. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 200. 
            (Will return at most 200 entries, even if pageSize is greater than 200)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that mention the authenticated user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByMeAsync">
            <summary>
            Asynchronously retrieves the 20 most recent retweets posted by the authenticated user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the authenticating user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByMeAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves retweets posted by the authenticated user. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the authenticating user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByMeAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves retweets posted by the authenticated user. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the authenticating user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByUserAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the 20 most recent retweets posted by the specified user.
            </summary>
            <param name="userId">The user ID to get retweets for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByUserAsync(System.Int64,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves retweets posted by the specified user. The most recent tweets are listed first.
            </summary>
            <param name="userId">The user ID to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByUserAsync(System.Int64,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves retweets posted by the specified user. The most recent tweets are listed first.
            </summary>
            <param name="userId">The user ID to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByUserAsync(System.String)">
            <summary>
            Asynchronously retrieves the 20 most recent retweets posted by the specified user.
            </summary>
            <param name="screenName">The screen name of the user to get retweets for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByUserAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves retweets posted by the specified user. The most recent tweets are listed first.
            </summary>
            <param name="screenName">The screen name of the user to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByUserAsync(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves retweets posted by the specified user. The most recent tweets are listed first.
            </summary>
            <param name="screenName">The screen name of the user to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by the specified user.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToMeAsync">
            <summary>
            Asynchronously retrieves the 20 most recent retweets posted by users the authenticating user follow.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users the authenticating user follow.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToMeAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves retweets posted by users the authenticating user follow. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users the authenticating user follow.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToMeAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves retweets posted by users the authenticating user follow. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users the authenticating user follow.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToUserAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the 20 most recent retweets posted by users that the specified user follows.
            </summary>
            <param name="userId">The user ID to get retweets for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users that the specified user follows.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToUserAsync(System.Int64,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves retweets posted by users that the specified user follows. The most recent tweets are listed first.
            </summary>
            <param name="userId">The user ID to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users that the specified user follows.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToUserAsync(System.Int64,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves retweets posted by users that the specified user follows. The most recent tweets are listed first.
            </summary>
            <param name="userId">The user ID to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users that the specified user follows.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToUserAsync(System.String)">
            <summary>
            Asynchronously retrieves the 20 most recent retweets by users that the specified user follows.
            </summary>
            <param name="screenName">The screen name of the user to get retweets for.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users that the specified user follows.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToUserAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves retweets by users that the specified user follows. The most recent tweets are listed first.
            </summary>
            <param name="screenName">The screen name of the user to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users that the specified user follows.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedToUserAsync(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves retweets by users that the specified user follows. The most recent tweets are listed first.
            </summary>
            <param name="screenName">The screen name of the user to get retweets for.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s that have been 'retweeted' by users that the specified user follows.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetsOfMeAsync">
            <summary>
            Asynchronously retrieves the 20 most recent tweets of the authenticated user that have been retweeted by others.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the authenticated user that have been retweeted by others.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetsOfMeAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets of the authenticated user that have been retweeted by others. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the authenticated user that have been retweeted by others.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetsOfMeAsync(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Asynchronously retrieves tweets of the authenticated user that have been retweeted by others. The most recent tweets are listed first.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <param name="sinceId">The minimum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <param name="maxId">The maximum <see cref="T:Spring.Social.Twitter.Api.Tweet"/> ID to return in the results.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the authenticated user that have been retweeted by others.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetStatusAsync(System.Int64)">
            <summary>
            Asynchronously returns a single tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the <see cref="T:Spring.Social.Twitter.Api.Tweet"/> from the specified ID.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.UpdateStatusAsync(System.String)">
            <summary>
            Asynchronously updates the user's status.
            </summary>
            <param name="status">The status message.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the created <see cref="T:Spring.Social.Twitter.Api.Tweet"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the status message duplicates a previously posted status.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the length of the status message exceeds Twitter's 140 character limit.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.UpdateStatusAsync(System.String,Spring.IO.IResource)">
            <summary>
            Asynchronously updates the user's status along with a picture.
            </summary>
            <param name="status">The status message.</param>
            <param name="photo">
            A <see cref="T:Spring.IO.IResource"/> for the photo data. It must contain GIF, JPG, or PNG data.
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the created <see cref="T:Spring.Social.Twitter.Api.Tweet"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the status message duplicates a previously posted status.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the length of the status message exceeds Twitter's 140 character limit.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the photo resource isn't a GIF, JPG, or PNG.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.UpdateStatusAsync(System.String,Spring.Social.Twitter.Api.StatusDetails)">
            <summary>
            Asynchronously updates the user's status, including additional metadata concerning the status.
            </summary>
            <param name="status">The status message.</param>
            <param name="details">The metadata pertaining to the status.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the created <see cref="T:Spring.Social.Twitter.Api.Tweet"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the status message duplicates a previously posted status.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the length of the status message exceeds Twitter's 140 character limit.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.UpdateStatusAsync(System.String,Spring.IO.IResource,Spring.Social.Twitter.Api.StatusDetails)">
            <summary>
            Asynchronously updates the user's status, including a picture and additional metadata concerning the status.
            </summary>
            <param name="status">The status message.</param>
            <param name="photo">
            A <see cref="T:Spring.IO.IResource"/> for the photo data. It must contain GIF, JPG, or PNG data.
            </param>
            <param name="details">The metadata pertaining to the status.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the created <see cref="T:Spring.Social.Twitter.Api.Tweet"/>.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the status message duplicates a previously posted status.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the length of the status message exceeds Twitter's 140 character limit.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If the photo resource isn't a GIF, JPG, or PNG.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.DeleteStatusAsync(System.Int64)">
            <summary>
            Asynchronously removes a status entry.
            </summary>
            <param name="tweetId">The tweet's ID to be removed.</param>
            <returns>A <code>Task</code> that represents the asynchronous operation.</returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.RetweetAsync(System.Int64)">
            <summary>
            Asynchronously posts a retweet of an existing tweet.
            </summary>
            <param name="tweetId">The tweet's ID to be retweeted.</param>
            <returns>A <code>Task</code> that represents the asynchronous operation.</returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves up to 100 retweets of a specific tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the retweets of the specified tweet.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetsAsync(System.Int64,System.Int32)">
            <summary>
            Asynchronously retrieves retweets of a specific tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <param name="count">
            The maximum number of retweets to return. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            the retweets of the specified tweet.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the profiles of up to 100 users how have retweeted a specific tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see> who have retweeted the specified tweet.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByAsync(System.Int64,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves the profiles of users how have retweeted a specific tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile"/>s per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see> who have retweeted the specified tweet.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByIdsAsync(System.Int64)">
            <summary>
            Asynchronously retrieves the IDs of up to 100 users who have retweeted a specific tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.TwitterProfile">user's profiles</see> who have retweeted the specified tweet.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetRetweetedByIdsAsync(System.Int64,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves the IDs of users who have retweeted a specific tweet.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <param name="page">The page to return.</param>
            <param name="pageSize">
            The number of entiers per page. Should be less than or equal to 100. 
            (Will return at most 100 entries, even if pageSize is greater than 100)
            </param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of user's ids who have retweeted the specified tweet.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetFavoritesAsync">
            <summary>
            Asynchronously retrieves the 20 most recent tweets favorited by the authenticated user.
            </summary>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's favorite timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.GetFavoritesAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves tweets favorited by the authenticated user.
            </summary>
            <param name="page">The page to return.</param>
            <param name="pageSize">The number of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s per page.</param>
            <returns>
            A <code>Task</code> that represents the asynchronous operation that can return 
            a list of <see cref="T:Spring.Social.Twitter.Api.Tweet"/>s from the specified user's favorite timeline.
            </returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.AddToFavoritesAsync(System.Int64)">
            <summary>
            Asynchronously adds a tweet to the user's collection of favorite tweets.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <returns>A <code>Task</code> that represents the asynchronous operation.</returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="M:Spring.Social.Twitter.Api.ITimelineOperations.RemoveFromFavoritesAsync(System.Int64)">
            <summary>
            Asynchronously removes a tweet from the user's collection of favorite tweets.
            </summary>
            <param name="tweetId">The tweet's ID.</param>
            <returns>A <code>Task</code> that represents the asynchronous operation.</returns>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If there is an error while communicating with Twitter.</exception>
            <exception cref="T:Spring.Social.Twitter.Api.TwitterApiException">If OAuth credentials was not provided.</exception>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.TwitterErrorHandler">
            <summary>
            Implementation of the <see cref="T:Spring.Rest.Client.IResponseErrorHandler"/> that handles errors from Twitter's REST API, 
            interpreting them into appropriate exceptions.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.TwitterErrorHandler.HandleError(System.Uri,Spring.Http.HttpMethod,Spring.Http.HttpResponseMessage{System.Byte[]})">
            <summary>
            Handles the error in the given response. 
            <para/>
            This method is only called when HasError() method has returned <see langword="true"/>.
            </summary>
            <remarks>
            This implementation throws appropriate exception if the response status code 
            is a client code error (4xx) or a server code error (5xx). 
            </remarks>
            <param name="requestUri">The request URI.</param>
            <param name="requestMethod">The request method.</param>
            <param name="response">The response message with the error.</param>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.TwitterProfileDeserializer">
            <summary>
            JSON deserializer for Twitter user's profile.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.LongListDeserializer">
            <summary>
            JSON deserializer for list of long values. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.TwitterProfileListDeserializer">
            <summary>
            JSON deserializer for list of Twitter user's profiles. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.TweetListDeserializer">
            <summary>
            JSON deserializer for list of tweets. 
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.Json.TweetDeserializer">
            <summary>
            JSON deserializer for tweets. 
            The JSON structure varies between the search API and the timeline API. 
            This deserializer determine which structure is in play and creates a tweet from it.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.TwitterProfile">
            <summary>
            Represents a Twitter user's profile information.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.ID">
            <summary>
            Gets or sets the user's Twitter ID
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.ScreenName">
            <summary>
            Gets or sets the user's Twitter screen name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.Name">
            <summary>
            Gets or sets the user's full name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.Url">
            <summary>
            Gets or sets the user's URL.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.ProfileUrl">
            <summary>
            Gets or sets the URL of the user's profile.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.ProfileImageUrl">
            <summary>
            Gets or sets the URL of the user's profile image in "normal" size (48x48).
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.Description">
            <summary>
            Gets or sets the user's description
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.Location">
            <summary>
            Gets or sets the user's location.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.CreatedDate">
            <summary>
            Gets or sets the date that the Twitter profile was created.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.Language">
            <summary>
            Gets or sets the user's preferred language.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.StatusesCount">
            <summary>
            Gets or sets the number of tweets this user has posted.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.FriendsCount">
            <summary>
            Gets or sets the number of friends the user has (the number of users this user follows).
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.FollowersCount">
            <summary>
            Gets or sets the number of followers the user has.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.FavoritesCount">
            <summary>
            Gets or sets the number of tweets that the user has marked as favorites.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.ListedCount">
            <summary>
            Gets or sets the number of lists the user is listed on.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsFollowing">
            <summary>
            Gets or sets a value indicating whether or not the authenticated user is following this user.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsFollowRequestSent">
            <summary>
            Gets or sets a value indicating whether or not a request has been sent by the authenticating user to follow this user.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsProtected">
            <summary>
            Gets or sets a value indicating whether or not the user's tweets are protected.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsNotificationsEnabled">
            <summary>
            Gets or sets a value indicating whether or not the user has mobile notifications enabled.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsVerified">
            <summary>
            Gets or sets a value indicating whether or not the user is verified with Twitter.
            </summary>
            <remarks>
            See http://support.twitter.com/groups/31-twitter-basics/topics/111-features/articles/119135-about-verified-accounts.
            </remarks>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsGeoEnabled">
            <summary>
            Gets or sets a value indicating whether or not the user has enabled their account with geo location.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsContributorsEnabled">
            <summary>
            Gets or sets a value indicating whether or not this profile is enabled for contributors. 
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsTranslator">
            <summary>
            Gets or sets a value indicating whether or not this user is a translator. 
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.TimeZone">
            <summary>
            Gets or sets the user's time zone. 
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.UtcOffset">
            <summary>
            Gets or sets the user's UTC offset in seconds.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.SidebarBorderColor">
            <summary>
            Gets or sets the color of the sidebar border on the user's Twitter profile page.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.SidebarFillColor">
            <summary>
            Gets or sets the color of the sidebar fill on the user's Twitter profile page.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.BackgroundColor">
            <summary>
            Gets or sets the color of the background of the user's Twitter profile page.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.UseBackgroundImage">
            <summary>
            Gets or sets a value indicating whether or not the user's Twitter profile page uses a background image.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.BackgroundImageUrl">
            <summary>
            Gets or sets the URL to a background image shown on the user's Twitter profile page.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.IsBackgroundImageTiled">
            <summary>
            Gets or sets a value indicating whether or not the background image is tiled.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.TextColor">
            <summary>
            Gets or sets the text color on the user's Twitter profile page.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.LinkColor">
            <summary>
            Gets or sets the link color on the user's Twitter profile page.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.TwitterProfile.ShowAllInlineMedia">
            <summary>
            Gets or sets a value indicating whether or not the user has selected to see all inline media from everyone. 
            If false, they will only see inline media from the users they follow.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.StatusDetails">
            <summary>
            Carries optional metadata pertaining to a Twitter status update.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.StatusDetails.InReplyToStatusId">
            <summary>
            Gets or sets the ID of an existing status that this status is in reply to. 
            Will be ignored unless the text of this status includes the author of the existing status (e.g., "@author"). 
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.StatusDetails.Latitude">
            <summary>
            Gets or sets the location of the status update in latitude. 
            Latitude values must be between -90.0 (south) and +90.0 (north).
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.StatusDetails.Longitude">
            <summary>
            Gets or sets the location of the status update in longitude. 
            Longitude values must be between -180.0 (west) and +180.0 (east).
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.StatusDetails.DisplayCoordinates">
            <summary>
            Gets or sets a value indicating whether or not Twitter should pinpoint the location precisely when displaying it on a map. 
            </summary>
            <remarks>
            By default, Twitter will display the status along with a map showing the general area where the tweet came from. 
            If display coordinates is true, however, it will display a map with a pin indicating the precise location of the status update.
            </remarks>
        </member>
        <member name="P:Spring.Social.Twitter.Api.StatusDetails.WrapLinks">
            <summary>
            Gets or sets a value indicating whether or not any valid URL found in the body 
            will automatically be wrapped with the Twitter's 't.co' link wrapper.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Tweet">
            <summary>
            Represents a Twitter status update (e.g., a "tweet").
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.ID">
            <summary>
            Gets or sets the tweet ID.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.Text">
            <summary>
            Gets or sets the tweet message.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.CreatedAt">
            <summary>
            Gets or sets the tweet created date.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.FromUser">
            <summary>
            Gets or sets the tweet author's screen name.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.ProfileImageUrl">
            <summary>
            Gets or sets the tweet author's profile image URL.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.ToUserId">
            <summary>
            Gets or sets the user ID when replying to a user.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.InReplyToStatusId">
            <summary>
            Gets or sets the tweet ID when replying to a tweet.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.FromUserId">
            <summary>
            Gets or sets the tweet author's ID.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.LanguageCode">
            <summary>
            Gets or sets the tweet's language code. May be null.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Tweet.Source">
            <summary>
            Gets or sets the source from where the tweet was send.
            </summary>
        </member>
        <member name="T:Spring.Social.Twitter.Api.Impl.TwitterTemplate">
            <summary>
            This is the central class for interacting with Twitter.
            </summary>
            <remarks>
            <para>
            Most (not all) Twitter operations require OAuth authentication. 
            To perform such operations, <see cref="T:Spring.Social.Twitter.Api.Impl.TwitterTemplate"/> must be constructed 
            with the minimal amount of information required to sign requests to Twitter's API 
            with an OAuth <code>Authorization</code> header.
            </para>
            <para>
            There are some operations, such as searching, that do not require OAuth authentication. 
            In those cases, you may use a <see cref="T:Spring.Social.Twitter.Api.Impl.TwitterTemplate"/> that is created through 
            the default constructor and without any OAuth details.
            Attempts to perform secured operations through such an instance, however, 
            will result in <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/> being thrown.
            </para>
            </remarks>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.Twitter.Api.ITwitter">
            <summary>
            Interface specifying a basic set of operations for interacting with Twitter.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.BlockOperations">
            <summary>
            Gets the portion of the Twitter API containing the block operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.DirectMessageOperations">
            <summary>
            Gets the portion of the Twitter API containing the direct message operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.FriendOperations">
            <summary>
            Gets the portion of the Twitter API containing the friends and followers operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.GeoOperations">
            <summary>
            Gets the portion of the Twitter API containing the geo location operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.ListOperations">
            <summary>
            Gets the portion of the Twitter API containing the user list operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.SearchOperations">
            <summary>
            Gets the portion of the Twitter API containing the search operations.
            </summary>        
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.TimelineOperations">
            <summary>
            Gets the portion of the Twitter API containing the tweet and timeline operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.UserOperations">
            <summary>
            Gets the portion of the Twitter API containing the user operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.ITwitter.RestOperations">
            <summary>
            Gets the underlying <see cref="T:Spring.Rest.Client.IRestOperations"/> object allowing for consumption of Twitter endpoints 
            that may not be otherwise covered by the API binding. 
            </summary>
            <remarks>
            The <see cref="T:Spring.Rest.Client.IRestOperations"/> object returned is configured to include an OAuth "Authorization" header on all requests.
            </remarks>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.TwitterTemplate.#ctor">
            <summary>
            Create a new instance of <see cref="T:Spring.Social.Twitter.Api.Impl.TwitterTemplate"/> able to perform unauthenticated operations against Twitter's API.
            </summary>
            <remarks>
            Some operations, such as search, do not require OAuth authentication. 
            A TwitterTemplate created with this constructor will support those operations. 
            Any operations requiring authentication will throw an <see cref="T:Spring.Social.Twitter.Api.TwitterApiException"/>.
            </remarks>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.TwitterTemplate.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Spring.Social.Twitter.Api.Impl.TwitterTemplate"/>.
            </summary>
            <param name="consumerKey">The application's API key.</param>
            <param name="consumerSecret">The application's API secret.</param>
            <param name="accessToken">An access token acquired through OAuth authentication with Twitter.</param>
            <param name="accessTokenSecret">An access token secret acquired through OAuth authentication with Twitter.</param>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.TwitterTemplate.ConfigureRestTemplate(Spring.Rest.Client.RestTemplate)">
            <summary>
            Enables customization of the <see cref="T:Spring.Rest.Client.RestTemplate"/> used to consume provider API resources.
            </summary>
            <remarks>
            An example use case might be to configure a custom error handler. 
            Note that this method is called after the RestTemplate has been configured with the message converters returned from GetMessageConverters().
            </remarks>
            <param name="restTemplate">The RestTemplate to configure.</param>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.TwitterTemplate.GetMessageConverters">
            <summary>
            Returns a list of <see cref="T:Spring.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="T:Spring.Rest.Client.RestTemplate"/>.
            </summary>
            <remarks>
            This implementation adds <see cref="T:Spring.Http.Converters.Json.SpringJsonHttpMessageConverter"/> and <see cref="T:Spring.Http.Converters.ByteArrayHttpMessageConverter"/> to the default list.
            </remarks>
            <returns>
            The list of <see cref="T:Spring.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="T:Spring.Rest.Client.RestTemplate"/>.
            </returns>
        </member>
        <member name="M:Spring.Social.Twitter.Api.Impl.TwitterTemplate.GetJsonMessageConverter">
            <summary>
            Returns a <see cref="T:Spring.Http.Converters.Json.SpringJsonHttpMessageConverter"/> to be used by the internal <see cref="T:Spring.Rest.Client.RestTemplate"/>.
            <para/>
            Override to customize the message converter (for example, to set a custom object mapper or supported media types).
            </summary>
            <returns>The configured <see cref="T:Spring.Http.Converters.Json.SpringJsonHttpMessageConverter"/>.</returns>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.BlockOperations">
            <summary>
            Gets the portion of the Twitter API containing the block operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.DirectMessageOperations">
            <summary>
            Gets the portion of the Twitter API containing the direct message operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.FriendOperations">
            <summary>
            Gets the portion of the Twitter API containing the friends and followers operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.GeoOperations">
            <summary>
            Gets the portion of the Twitter API containing the geo location operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.ListOperations">
            <summary>
            Gets the portion of the Twitter API containing the user list operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.SearchOperations">
            <summary>
            Gets the portion of the Twitter API containing the search operations.
            </summary>        
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.TimelineOperations">
            <summary>
            Gets the portion of the Twitter API containing the tweet and timeline operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.UserOperations">
            <summary>
            Gets the portion of the Twitter API containing the user operations.
            </summary>
        </member>
        <member name="P:Spring.Social.Twitter.Api.Impl.TwitterTemplate.RestOperations">
            <summary>
            Gets the underlying <see cref="T:Spring.Rest.Client.IRestOperations"/> object allowing for consumption of Twitter endpoints 
            that may not be otherwise covered by the API binding. 
            </summary>
            <remarks>
            The <see cref="T:Spring.Rest.Client.IRestOperations"/> object returned is configured to include an OAuth "Authorization" header on all requests.
            </remarks>
        </member>
        <member name="T:Spring.Social.Twitter.Connect.TwitterServiceProvider">
            <summary>
            Twitter <see cref="T:System.IServiceProvider"/> implementation.
            </summary>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.Twitter.Connect.TwitterServiceProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Spring.Social.Twitter.Connect.TwitterServiceProvider"/>.
            </summary>
            <param name="consumerKey">The application's API key.</param>
            <param name="consumerSecret">The application's API secret.</param>
        </member>
        <member name="M:Spring.Social.Twitter.Connect.TwitterServiceProvider.GetApi(System.String,System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <param name="secret">The access token secret.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
    </members>
</doc>
